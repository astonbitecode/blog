<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Aston&#39;s Programming Thoughts</title>
    <link>https://astonbitecode.github.io/blog/tags/rust/</link>
    <description>Recent content in rust on Aston&#39;s Programming Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jul 2020 00:10:10 +0000</lastBuildDate>
    
	<atom:link href="https://astonbitecode.github.io/blog/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>j4rs v0.12.0: Java to Rust direction</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</link>
      <pubDate>Wed, 15 Jul 2020 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</guid>
      <description>I would like to share a new direction that my j4rs project took after its 0.12.0 release.
Until v0.12.0, j4rs provided to Rust applications the tools to achieve calls to the Java world. This included setting up and manage JVMs, instantiating Java Classes, making calls to Java methods, providing the means for Java to Rust callbacks etc.
The project was following solely a Rust-first approach, giving the Rust applications the ability to take advantage of the huge amount of libraries and tools existing in the Java ecosystem.</description>
    </item>
    
    <item>
      <title>Announcing j4rs</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link>
      <pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</guid>
      <description>j4rs stands for &amp;ldquo;Java for Rust&amp;rdquo; and allows effortless calls to Java code, from Rust.
 Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.
By &amp;ldquo;easily&amp;rdquo;, I mean:
 Taking care about the configuration required by JNI (e.</description>
    </item>
    
    <item>
      <title>JavaFX UI in Rust</title>
      <link>https://astonbitecode.github.io/blog/post/rust-javafx/</link>
      <pubDate>Thu, 28 Feb 2019 00:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/rust-javafx/</guid>
      <description>In this post, I would like to share the way how we can implement a Rust application that has a User Interface written in JavaFX.
A brief description follows, but you may see the full code here.
General description We will create a Rust application that:
 Creates a JVM Starts a JavaFX application Accepts callbacks from the Java world and prints them in the console.  Creating a JVM from Rust code and communicating with the Java world is achieved using the j4rs crate.</description>
    </item>
    
  </channel>
</rss>