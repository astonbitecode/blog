<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Aston&#39;s Programming Thoughts</title>
    <link>https://astonbitecode.github.io/blog/tags/java/</link>
    <description>Recent content in java on Aston&#39;s Programming Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 00:10:10 +0000</lastBuildDate><atom:link href="https://astonbitecode.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>j4rs: JavaFX support (WIP)</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_javafx_support/</link>
      <pubDate>Tue, 15 Sep 2020 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_javafx_support/</guid>
      <description>Note: JavaFX support in j4rs is a work in progress. Adding features as the time passes and versioning evolves seems better than attempting to create full-feature JavaFX support for Rust. The latter feels rather difficult, frightening and time-demanding.
Introduction Some time ago, I was exploring things that can be achieved by using j4rs and had the idea to implement a JavaFX GUI. This indeed happened, but the attempt included implementing some parts in Java and some in Rust, along with several hacks.</description>
    </item>
    
    <item>
      <title>j4rs v0.12.0: Java to Rust direction</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</link>
      <pubDate>Wed, 15 Jul 2020 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</guid>
      <description>I would like to share a new direction that my j4rs project took after its 0.12.0 release.
Until v0.12.0, j4rs provided to Rust applications the tools to achieve calls to the Java world. This included setting up and manage JVMs, instantiating Java Classes, making calls to Java methods, providing the means for Java to Rust callbacks etc.
The project was following solely a Rust-first approach, giving the Rust applications the ability to take advantage of the huge amount of libraries and tools existing in the Java ecosystem.</description>
    </item>
    
    <item>
      <title>Announcing j4rs</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link>
      <pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</guid>
      <description>j4rs stands for &amp;ldquo;Java for Rust&amp;rdquo; and allows effortless calls to Java code, from Rust.
 Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.
By &amp;ldquo;easily&amp;rdquo;, I mean:
 Taking care about the configuration required by JNI (e.</description>
    </item>
    
  </channel>
</rss>
