<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For on Aston&#39;s Programming Thoughts</title>
    <link>https://astonbitecode.github.io/blog/tags/for/</link>
    <description>Recent content in For on Aston&#39;s Programming Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2015 08:05:58 +0000</lastBuildDate>
    <atom:link href="https://astonbitecode.github.io/blog/tags/for/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Scala: Use fold to serialize any number of Futures</title>
      <link>https://astonbitecode.github.io/blog/blog/2015/10/04/scala-use-fold-to-serialize-any-number-of-futures/</link>
      <pubDate>Sun, 04 Oct 2015 08:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/blog/2015/10/04/scala-use-fold-to-serialize-any-number-of-futures/</guid>
      <description>&lt;p&gt;Scala&amp;rsquo;s for-comprehensions are extremely useful and offer much more than just looping. For this post, I would like to focus on using for-comprehensions for manipulating Futures. More specifically, for serializing Futures.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we have a function that performs some kind of logic and returns a Future:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;def addOneAndPrint(num: Int): Future[Unit] = {
  Future {
    val addedOne = num + 1
    print(addedOne + &amp;quot; &amp;quot;)
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Users of such a fuction, may want to call it more than one time and additionally, to call it serially. This is easily done by using a for-comprehension like following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;for {
  _ &amp;lt;- addOneAndPrint(1)
  _ &amp;lt;- addOneAndPrint(2)
} yield (Unit)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This assures that addOneAndPrint(1) will be executed first, the result will be returned and then the addOneAndPrint(2) will be executed.&lt;/p&gt;

&lt;p&gt;However, using the for like that, is a bit awkward if this should include many serialized calls (or unknown number of calls).
For example, how could someone call the addOneAndPrint function one time for each element of a List of Integers?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val ints = List(1, 3, 5, 7, 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One nice solution is to use foldLeft for this List, combining a for-comprehension like following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val dummy = Future {}
 
ints.foldLeft(dummy) {
  case (prevFuture, currentNumber) =&amp;gt; {
    for {
      _ &amp;lt;- prevFuture
      _ &amp;lt;- addOneAndPrint(currentNumber)
    } yield (Unit)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will be the result of calling the addOneAndPrint serially:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2 4 6 8 10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>