<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fold on Aston&#39;s Programming Thoughts</title>
    <link>https://astonbitecode.github.io/blog/tags/fold/</link>
    <description>Recent content in fold on Aston&#39;s Programming Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Oct 2015 08:05:58 +0000</lastBuildDate>
    
	<atom:link href="https://astonbitecode.github.io/blog/tags/fold/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala: Use fold to serialize any number of Futures</title>
      <link>https://astonbitecode.github.io/blog/post/003-foldfor/</link>
      <pubDate>Sun, 04 Oct 2015 08:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/003-foldfor/</guid>
      <description>Scala&amp;rsquo;s for-comprehensions are extremely useful and offer much more than just looping. For this post, I would like to focus on using for-comprehensions for manipulating Futures. More specifically, for serializing Futures.
Let&amp;rsquo;s assume that we have a function that performs some kind of logic and returns a Future:
def addOneAndPrint(num: Int): Future[Unit] = { Future { val addedOne = num + 1 print(addedOne + &amp;#34; &amp;#34;) } } Users of such a fuction, may want to call it more than one time and additionally, to call it serially.</description>
    </item>
    
  </channel>
</rss>