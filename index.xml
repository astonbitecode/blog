<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aston&#39;s Programming Thoughts</title>
    <link>https://astonbitecode.github.io/blog/</link>
    <description>Recent content on Aston&#39;s Programming Thoughts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 00:10:10 +0000</lastBuildDate>
    
	<atom:link href="https://astonbitecode.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>j4rs: JavaFX support (WIP)</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_javafx_support/</link>
      <pubDate>Tue, 15 Sep 2020 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_javafx_support/</guid>
      <description>Note: JavaFX support in j4rs is a work in progress. Adding features as the time passes and versioning evolves seems better than attempting to create full-feature JavaFX support for Rust. The latter feels rather difficult, frightening and time-demanding.
Introduction Some time ago, I was exploring things that can be achieved by using j4rs and had the idea to implement a JavaFX GUI. This indeed happened, but the attempt included implementing some parts in Java and some in Rust, along with several hacks.</description>
    </item>
    
    <item>
      <title>Hiding secrets in public view</title>
      <link>https://astonbitecode.github.io/blog/post/secrets-in-public/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/secrets-in-public/</guid>
      <description>Some time ago, I got intrigued by an article on the Register, finding out about the Baconian cipher.
As cited in wikipedia:
Bacon&amp;rsquo;s cipher is a method of message encoding devised by Francis Bacon in 1605. A message is concealed in the presentation of text, rather than its content.
So I started writing some code, initially implementing Baconian cipher codecs, which encode text to As and Bs and decode it back to text.</description>
    </item>
    
    <item>
      <title>j4rs v0.12.0: Java to Rust direction</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</link>
      <pubDate>Wed, 15 Jul 2020 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.12.0/</guid>
      <description>I would like to share a new direction that my j4rs project took after its 0.12.0 release.
Until v0.12.0, j4rs provided to Rust applications the tools to achieve calls to the Java world. This included setting up and manage JVMs, instantiating Java Classes, making calls to Java methods, providing the means for Java to Rust callbacks etc.
The project was following solely a Rust-first approach, giving the Rust applications the ability to take advantage of the huge amount of libraries and tools existing in the Java ecosystem.</description>
    </item>
    
    <item>
      <title>Announcing j4rs</title>
      <link>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</link>
      <pubDate>Fri, 24 May 2019 00:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/j4rs_0.6.0/</guid>
      <description>j4rs stands for &amp;ldquo;Java for Rust&amp;rdquo; and allows effortless calls to Java code, from Rust.
 Some time ago, on a need to call Java code from Rust, I started the j4rs project. The main idea was to implement a crate that would give the ability to its users to make calls to Java easily, so that they can benefit from the huge Java ecosystem.
By &amp;ldquo;easily&amp;rdquo;, I mean:
 Taking care about the configuration required by JNI (e.</description>
    </item>
    
    <item>
      <title>JavaFX UI in Rust</title>
      <link>https://astonbitecode.github.io/blog/post/rust-javafx/</link>
      <pubDate>Thu, 28 Feb 2019 00:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/rust-javafx/</guid>
      <description>Dear reader, this post describes an approach that is outdated. You may be interested in this post instead.
 In this post, I would like to share the way how we can implement a Rust application that has a User Interface written in JavaFX.
A brief description follows, but you may see the full code here.
General description We will create a Rust application that:
 Creates a JVM Starts a JavaFX application Accepts callbacks from the Java world and prints them in the console.</description>
    </item>
    
    <item>
      <title>Akka: To ask, or not to ask?</title>
      <link>https://astonbitecode.github.io/blog/post/bang-not-ask/</link>
      <pubDate>Tue, 20 Sep 2016 06:10:10 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/bang-not-ask/</guid>
      <description>There are times that Akka Actors need to contact some other Actor, get the response and then continue their processing.
It is debatable whether this is a good design or not. However, when designing Akka APIs to be used by different libraries/modules, it is a reality that someone may have to deal with - especially when many different teams collaborate with each other, so you don&amp;rsquo;t have access to others&amp;rsquo; code.</description>
    </item>
    
    <item>
      <title>Scala: Use fold to serialize any number of Futures</title>
      <link>https://astonbitecode.github.io/blog/post/foldfor/</link>
      <pubDate>Sun, 04 Oct 2015 08:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/foldfor/</guid>
      <description>Scala&amp;rsquo;s for-comprehensions are extremely useful and offer much more than just looping. For this post, I would like to focus on using for-comprehensions for manipulating Futures. More specifically, for serializing Futures.
Let&amp;rsquo;s assume that we have a function that performs some kind of logic and returns a Future:
def addOneAndPrint(num: Int): Future[Unit] = { Future { val addedOne = num + 1 print(addedOne + &amp;#34; &amp;#34;) } } Users of such a fuction, may want to call it more than one time and additionally, to call it serially.</description>
    </item>
    
    <item>
      <title>A (kind-of) Dependency Injection in Scala</title>
      <link>https://astonbitecode.github.io/blog/post/kindofdi/</link>
      <pubDate>Sat, 25 Apr 2015 08:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/kindofdi/</guid>
      <description>The problem While projects evolve, the lines of code increase and the dependencies between the classes are becoming more and more complicated. With the absence of some Dependency Injection (DI) framework/library, this ends up quickly in having to pass instances here and there through constructors of classes. The constructors may end up having something like 10+ arguments. To make things worse, for some cases, these arguments are not used by the logic of the classes themselves, but instead, they are just used to create subclasses!</description>
    </item>
    
    <item>
      <title>OSGi: Finding the way to JEE and JSF</title>
      <link>https://astonbitecode.github.io/blog/post/osgijsf/</link>
      <pubDate>Thu, 05 Mar 2015 08:05:58 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/post/osgijsf/</guid>
      <description>Note: You may find the complete source code for this tutorial here.
Combining the modularity offered by OSGi with the EE technologies may result to powerful, scalable and maintainable applications.
Eclipse Virgo bridges OSGi and JEE worlds and provides a “completely module-based Java application server”.
Even if the Virgo documentation provides detailed explanations, it seemed difficult to find tutorials that are functional and build up to a JEE Web application that is powered by OSGi bundles and services.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://astonbitecode.github.io/blog/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://astonbitecode.github.io/blog/page/about/</guid>
      <description>In this blog, I post things that I implement or simply think, with the hope that they might help someone, or even inspire.
 function getmail() { var m = document.getElementById(&#34;laim&#34;).innerText.split(&#34;&#34;).reverse().join(&#34;&#34;); document.getElementById(&#34;mailmelink&#34;).href=&#34;mailto:&#34; + m; }  Contact me if you have any suggestions or would like to give feedback. moc.liamnotorp@edocetibnotsa  Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.</description>
    </item>
    
  </channel>
</rss>